head(test[,MGPHat])
Test[,MGPHat] <- predict(model, Test)
head(Test[,MGPHat])
Test[,'mpg_hat'] <- predict(model, Test)
View(Test)
head(Test[,MGPHat])
MPGHat
head(Test[,mpg_hat])
head(Test[,'mpg_hat'])
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
ggplot(data=psub, aes(psub[,targetVar])) + geom_histogram
summary(model2)
summary(model)
SST <- sum((Test[,'mpg'] - mean(test[,'mpg']))^2)
SSR <- sum((test[,'mpg_pred'] - mean(test[,'mpg']))^2)
SSR/SST
test[,targetVar2] <- log(test[,targetVar])
test[,'residual'] <- test[,targetVarHat] - test[,targetVar2]
SST <- sum((test[,targetVar2] - mean(test[,targetVar2]))^2)
SSR <- sum((test[,targetVarHat2] - mean(test[,targetVar2]))^2)
SSR/SST
targetVarHat <- paste0(targetVar2, "_hat")
test[,targetVarHat] <- predict(model2, test)
head(test[,targetVarHat])
# Calculate R**2 on the test data
test[,targetVar2] <- log(test[,targetVar])
test[,'residual'] <- test[,targetVarHat] - test[,targetVar2]
SST <- sum((test[,targetVar2] - mean(test[,targetVar2]))^2)
SSR <- sum((test[,targetVarHat2] - mean(test[,targetVar2]))^2)
SSR/SST # Notice .71 in test set, .99 in train set
# Means model is overfit, but still not bad performance
targetVarHat <- paste0(targetVar2, "_hat")
test[,targetVarHat] <- predict(model2, test)
head(test[,targetVarHat])
# Calculate R**2 on the test data
test[,targetVar2] <- log(test[,targetVar])
test[,'residual'] <- test[,targetVarHat] - test[,targetVar2]
SST <- sum((test[,targetVar2] - mean(test[,targetVar2]))^2)
SSR <- sum((test[,targetVarHat] - mean(test[,targetVar2]))^2)
SSR/SST # Notice .71 in test set, .99 in train set
# Means model is overfit, but still not bad performance
1-0.03022653
1-0.3022653
Test[,'mpg_pred'] <- predict(model, Test)
SSR
SST
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(test[,'mpg']))^2)
SSR <- sum((test[,'mpg_pred'] - mean(test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(test[,'mpg']))^2)
SSR <- sum((test[,'mpg_pred'] - mean(test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
summary(model)
summary(model)[,4]
summary(model)[,3]
summary(model)[,'Pr(>|t|)']
sumary(model)[1]
summary(model)[1]
summary(model)[[1]]
summary(model)[[2]]
summary(model)
summary(model)[[3]]
summary(model)[['Coefficients']]
summary(model)[['Coefficients']]
summary(model)['Coefficients']
coefficients(model)
summary(model)[1
]
summary(model)
summary(model)#coefficients
summary(model)#call
summary(model)$call
summary(model)$coefficients
summary(model)$coefficients
summary(model)$coefficients$Pr(>|t|)
summary(model)$coefficients
summary(model)$coefficients[4]
summary(model)$coefficients[,4]
summary(model)
modelvars<-as.formula(paste(modelvars,'- displacement'))
modelvars
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower-1)
modelvars
modelvars<-as.formula(paste(as.character(modelvars),' - displacement'))
modelvars
as.character(modelvars)
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower-1)
as.character(modelvars)
as.character(as.character(modelvars))
modelvars
str(modelvars)
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower-1)
modelvars
modelvars<-as.formula(mpg~weight+acceleration+horsepower-1)
modelvars
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
View(data2)
plot(data2[,modelyear],data2[,mpg])
plot(data2$modelyear,data2$mpg)
summary(data2)
plot(data2$modelyear,data2$mpg)
plot(data2$mpg,data2$`model year`)
plot(data2$`model year` ,data2$mpg)
summary(data2)
modelvars<-modelvars<-as.formula(mpg~cylinders+displacement+horsepower+weight+acceleration+model year+origin+car name-1)
modelvars<-modelvars<-as.formula(mpg~cylinders+displacement+horsepower+weight+acceleration+`model year`+origin+`car name`-1)
modelvars
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
cor(data[,c(-2,-7,-8,-9)])
#There are na's in horsepower, so the correlation matrix is having issues. We must get rid of these na's
data2<-data[!is.na(data$horsepower),]
cor(data2[,c(-2,-7,-8,-9)])
corrplot.mixed(cor(data2[,c(-2,-7,-8,-9)]))
cor(data[,c(-2,-7,-8,-9)])
#There are na's in horsepower, so the correlation matrix is having issues. We must get rid of these na's
data2<-data[!is.na(data$horsepower),]
cor(data2[,c(-2,-7,-8,-9)])
corrplot.mixed(cor(data2[,c(-2,-7,-8,-9)]))
plot(data1[,c(-2,-7,-8,-9)])
data1$mpg<-exp(data1$mpg)
plot(data1[,c(-2,-7,-8,-9)])
data1$mpg<-log(data1$mpg)
plot(data1[,c(-2,-7,-8,-9)])
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
View(Test)
plot(model)
# 1.Load in the auto mpg data set: https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data
data<-read.table('https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data')
colnames(data)<-c('mpg','cylinders','displacement','horsepower','weight','acceleration','model year','origin','car name')
#found names from https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.names
# 2. Identify all of the categorical variables, all of the numeric variables
# and all of the binary variables.
str(data)
#From this we can see that mpg, displacement, weight, and acceleration are numeric.
#We also see that cylinders, model year and origin are integers
#Last we see that horsepower and car name are categorical variables, but horsepower should not be categorical and instead should be continuous. The reason it is categorical is because there are missing values inputed as '?'.
#We must change this variable into a numeric variable.
data$horsepower<-as.numeric(as.character(data$horsepower))
str(data)
# 3. Identify the appropriate descriptive statistics and graph for this data set.
# Execute on those and use the comments to discuss relevant relationships or insights discovered.
plot(data)
#The appropriate descriptive statistics are mpg, displacement, horsepower, weight and acceleration are the appropriate decriptive satistics.
#We could also possibly take into account the cylidars, but looking at the plots, since cyliders is discrete it seems to be somewhat linear with some variables, and others it is too hard to tell.
plot(data[,c(-2,-7,-8,-9)])
#From this plot of the numerical variables, we can see that displacement, horsepwer and weight all seem to have positive linear relationships with each other.
#Acceleration seems to have a slight negative linear relationship with horsepower, displacement, and weight.
#Last, mpg seems to have a exponential relationship with displacement, horsepower and weight, so we need to transform mpg with the log function.
data1<-data
data1$mpg<-log(data1$mpg)
plot(data1[,c(-2,-7,-8,-9)])
#Now the mpg data looks much more linear and it seems as though it has a negative relationship with displacement, horsepower, and weight. Whereas it has a slight positvie relationship with acceleration.
# 4. Create a correlation matrix for all of the numeric variables.
library(corrplot)
cor(data[,c(-2,-7,-8,-9)])
#There are na's in horsepower, so the correlation matrix is having issues. We must get rid of these na's
data2<-data[!is.na(data$horsepower),]
cor(data2[,c(-2,-7,-8,-9)])
corrplot.mixed(cor(data2[,c(-2,-7,-8,-9)]))
# 5. Identify the columns (if any) with missing data.
summary(data)
#horsepower is only column with na's. There are 6.
data[is.na(data$horsepower),]
row.names(data[is.na(data$horsepower),])
#The rows with na's in the horsepower column is 33, 127, 331, 337, 355, and 375.
#The method I am going to use to deal with these na's is to delete them from the data for my analysis.
data<-data[!is.na(data$horsepower),]
summary(data)
#There is no more missing values
# 6. Divide the data into a train/test set (80% and 20% respectively) using stratified sampling
trainPct <- .8
testPct <- 1 - trainPct
set.seed(34543)
library('caret')
inTrain <- createDataPartition(y = data$mpg, p = trainPct, list = FALSE)
Train <- data[inTrain,]
Test <- data[-inTrain,]
stopifnot(nrow(Train) + nrow(Test) == nrow(data))
#adopted from lecture code
sum(Train$mpg)/nrow(Train)
sum(Test$mpg)/nrow(Test)
# 7. Fit a linear model to the data using the numeric variables only. Calculate the R**2 on the test set.
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
#Test data has an R**2 of 0.80 and and Train R**2 of 0.9439
# 8. Programmatically identify and remove the non-significant variables (alpha = .05). Fit a new model with those variables removed.
# Calculate the R**2 on the test set with the new model. Did this improve performance?
summary(model)$coefficients[,4]
#fix
modelvars<-modelvars<-as.formula(mpg~weight+acceleration+horsepower-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
# 9. Attempt to fit a model on all of the relevant independent variables (including carName).
# Then calculate the R**2 on a test set. You will likely encounter an error.
# Explain why this error occurs. Fix this error.
modelvars<-modelvars<-as.formula(mpg~cylinders+displacement+horsepower+weight+acceleration+`model year`+origin+`car name`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
#We get an error because there exist car names in the test data set that are not in the training data. We can fix it by creating an other category for car names that are less frequent.
# 10. Determine the relationship between model year and mpg.
# Interpret this relationship.
# Theorize why this relationship might occur.
plot(data$`model year`,data$mpg)
# 11. Build the best linear model you can (as measured by R**2 on the test data)
# Record the value obtained in the comments below. Make sure to show all your code.
modelvars<-as.formula(mpg~weight+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
#Test data
plot(data$`model year`,data$mpg)
modelvars<-as.formula(mpg~weight+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
plot(model)
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+acceleration+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~displacement+weight+acceleration+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
modelvars<-as.formula(mpg~displacement+weight+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~displacement+weight+acceleration+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+acceleration+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+acceleration+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+acceleration+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
modelvars<-as.formula(mpg~weight+horsepower+`model year`-1)
model <- lm(modelvars, data = Train)
summary(model)
Test[,'mpg_pred'] <- predict(model, Test)
head(Test[,'mpg_pred'])
Test[,'residual'] <- Test[,'mpg'] - Test[,'mpg_pred']
SST <- sum((Test[,'mpg'] - mean(Test[,'mpg']))^2)
SSR <- sum((Test[,'mpg_pred'] - mean(Test[,'mpg']))^2)
SSR/SST
plot(model)
View(Test)
View(Train)
predict(model,Train[14,])
Train[14,]
View(Train)
data[14,]
predict(model,data[14,])
load("~/Documents/Math 571 project/weather1.Rda")
View(weather20140101_20150426)
View(weather20140101_20150426)
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
weather20150427_20151113=data.frame(history_range(location = location, date_start = '20150427', date_end = '20151113'))
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
set_location(territory = 'Illinois', city = 'Chicago')
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
install.packages('rwunderground')
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
install.packages("rwunderground")
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
weather20150427_20151113=data.frame(history_range(location = location, date_start = '20150427', date_end = '20151113'))
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
weather20150427_20151113=data.frame(history_range(location = location, date_start = '20150427', date_end = '20151113'))
history(location, '20140101')
history(location=location, '20140101')
set_location(territory='Illinois', city= 'chicago')
library(devtools)
devtools::install_github('ALShum/rwunderground')
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
weather20150427_20151113=data.frame(history_range(location = location, date_start = '20150427', date_end = '20151113'))
View(weather20150427_20151113)
setwd("~/Documents/Math 571 project")
save(weather20150427_20151113,file='weather2.Rda')
setwd("~/")
library(devtools)
devtools::install_github('ALShum/rwunderground')
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
weather20151114_20170328=data.frame(history_range(location = location, date_start = '20151114', date_end = '20170328'))
library(devtools)
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
history(location,'20140101')
library(rwunderground)
rwunderground::set_api_key('651e75c69a9131c3')
key=get_api_key()
location=set_location(territory = 'Illinois', city = 'Chicago')
weather20151114_20170328=data.frame(history_range(location = location, date_start = '20151114', date_end = '20170328'))
View(weather20151114_20170328)
setwd("~/Documents/Math 571 project")
save(weather20151114_20170328,file='weather3.Rda')

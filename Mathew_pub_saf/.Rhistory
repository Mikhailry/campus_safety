temp <- subset(df,select = c("mpg", "displacement","weight","horsepower"))
temp[which(temp$horsepower == "?"),'horsepower'] <- NA
temp$horsepower <- as.numeric(as.character(temp$horsepower))
temp_test <- temp[which(is.na(temp$horsepower)),]
temp_train <- temp[which(!(is.na(temp$horsepower))),]
temp_mod <- lm(horsepower~mpg+weight+displacement, data = temp_train)
temp_pred <- predict(temp_mod,temp_test[,c(1:3)])
head(temp)
summary(temp_mod)
temp_pred
df[which(is.na(df$horsepower)),"horsepower"] <- temp_pred[match(which(is.na(df$horsepower)),names(temp_pred))]
intrain <- createDataPartition(y = df[,'mpg'], list = F)
library('caret')
library('lattice')
intrain <- createDataPartition(y = df[,'mpg'], list = F)
df_train <- df[intrain,]
df_test <- df[-intrain,]
sum(df_train$mpg)/nrow(df_train)
sum(df_test$mpg)/nrow(df_test)
createModelFormula <- function(targetVar, xVars, includeIntercept = TRUE){
if(includeIntercept){
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ ')))
} else {
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ '), -1))
}
return(modelForm)
}
targetVar <- 'mpg'
form1 <- createModelFormula(targetVar,numVar)
form1
?glm
plot(df$mpg)
qqplot(df$mpg)
hist(df$mpg)
hist(log(df$mpg)
)
hist(df$mpg)
?qqplot
x <- rnorm(100,1)
qqplot(df$mpg,x)
qqline(x)
qqplot(df$mpg,x); qqline(x)
plot(qqline(x))
qqplot(df$mpg,x)
qqplot(x,df$mpg)
mod_1 <- glm(form1,family = gaussian(link = 'identity'), data = df_train)
summary(mod_1)
df$horsepower <- as.numeric(df$horsepower)
str(df)
str(df_train)
df$horsepower <- as.numeric(df$horsepower)
intrain <- createDataPartition(y = df[,'mpg'], list = F)
df_train <- df[intrain,]
df_test <- df[-intrain,]
str(df_train)
form1 <- createModelFormula(targetVar,numVar)
mod_1 <- glm(form1,family = gaussian(link = 'identity'), data = df_train)
mod_1 <- glm(form1,family = gaussian(link = 'identity'), data = df_train)
summary(mod_1)
n <- 10000
runif(n)<0.5
runif(n)
??runif
?runif
mod_1 <- lm(form1, data = df_train)
summary(mod_1)
pred_1 <- predict(mod_1,data = df_test)
pred_1
dim(pred_1)
length(pred_1)
dim(df_test)
form1
modelForm <- createModelFormula(targetVar = targetVar, xVars = xVars, includeIntercept = FALSE)
modelForm <- createModelFormula(targetVar = targetVar, xVars = numVar, includeIntercept = FALSE)
modelForm
modelForm <- createModelFormula(targetVar = targetVar, xVars = numVar, includeIntercept = T)
modelForm <-
1
form1 <- createModelFormula(targetVar,numVar[2:length(numVar)])
form1
mod_1 <- lm(form1, data = df_train)
pred_1 <- predict(mod_1,data = df_test)
length(pred_1)
dim(df_test)
dim(df_train)
pred_1 <- predict(mod_1, df_test)
intrain <- createDataPartition(y = df[,'mpg'], p= 0.8,list = F)
df_train <- df[intrain,]
df_test <- df[-intrain,]
dim(df_train)
dim(df_test)
mod_1 <- lm(form1, data = df_train)
pred_1 <- predict(mod_1, df_test)
length(pred_1)
summary(mod_1)
pred
pred_1
pred_1 <- predict(mod_1, df_test)
pred_1
result <- data.frame(df_test$mpg,pred_1)
colnames(result) <- c("Actual", "Predicted")
head(result)
result <- data.frame(result,(result$Actual-result$Predicted))
head(result)
colnames(result[ncol(result)])
colnames(result[ncol(result)]) <- "Error"
colnames(result)
colnames(result[ncol(result)]) <- "Error"
colnames(result)
head(result)
colnames(result(3)) <- "Error"
colnames(result)[3]
colnames(result)[3] <- "Error"
colnames(result)
RSS <- sum((result$Error)^2)
TSS <- sum((result$Actual-mean(result$Actual))^2)
R_sqr <- 1-(RSS/TSS)
RSS
TSS
R_sqr
summary(mod_1)
RSS/TSS
mod_1  $effects
mod_1$rank
mod_1$assign
mod_1$call
mod_1$xlevels
mod_1$model
mod_1$coefficients
summary(mod_1)
mod_1$coefficients[Pr]
mod_1$coefficients
mod_1$coefficients['Pr(>|t|)']
mod_1$coefficients['Std. Error']
mod_1$coefficients[4]
mod_1$coefficients[[4]]
dim(mod_1$coefficients)
length(mod_1$coefficients)
summary(mod_1)
mod_2 <- lm(mpg~displacement+weight,data = df_train)
pred_2 <- predict(mod_2, df_test)
result_n <- data.frame(df_test$mpg,pred_2)
colnames(result_n) <- c("Actual", "Predicted")
result <- data.frame(result_n,(result_n$Actual-result_n$Predicted))
colnames(result_n)[3] <- "Error"
RSS1 <- sum((result_n$Error)^2)
TSS1 <- sum((result_n$Actual-mean(result_n$Actual))^2)
R_sqr1 <- 1-(RSS1/TSS1)
result_n
result_n <- data.frame(df_test$mpg,pred_2)
colnames(result_n) <- c("Actual", "Predicted")
result_n <- data.frame(result_n,(result_n$Actual-result_n$Predicted))
colnames(result_n)[3] <- "Error"
RSS1 <- sum((result_n$Error)^2)
TSS1 <- sum((result_n$Actual-mean(result_n$Actual))^2)
R_sqr1 <- 1-(RSS1/TSS1)
result <- data.frame(df_test$mpg,pred_1)
colnames(result) <- c("Actual", "Predicted")
result <- data.frame(result,(result$Actual-result$Predicted))
colnames(result)[3] <- "Error"
RSS <- sum((result$Error)^2)
TSS <- sum((result$Actual-mean(result$Actual))^2)
R_sqr <- 1-(RSS/TSS)
R_sqr1
R_sqr
hist(df$`model year`,df$mpg)
boxplot(df$mpg~df$`model year`)
boxplot(df$mpg~df$`model year`,xlab = "Model Year", ylab = "MPG")
head(df)
aggregate(df$weight,df$,mean)
aggregate(df$weight,df$`model year`,mean)
aggregate(df$weight,unique(df$`model year`),mean)
aggregate(df$weight,as.list(unique(df$`model year`)),mean)
aggregate(df$weight,list(unique(df$`model year`)),mean)
aggregate(df$weight,list(df$`model year`),mean)
aggregate(df$mpg,list(df$`model year`),mean)
mpg_per_year <-aggregate(df$mpg,list(df$`model year`),mean)
colnames(mpg_per_year) <- c("Model Year", "Mean MPG")
mpg_per_year
head(df)
df
df[1;8]
df[1:8]
df <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
colnames(df) <- c("mpg", "cylinders", "displacement","horsepower","weight","acceleration","model year", "origin","car name")
str(df)
catVar <- c("cylinders","model year","origin","car name")
numVar <- c("mpg","displacement","horsepower","weight","acceleration")
df$horsepower <- as.numeric(as.character(df$horsepower))
df[catVar] <- lapply(df[catVar], factor)
colnames(df)[colSums(df == "?")>0] # identufying th columns with missing values
df$horsepower <- as.character(df$horsepower) # changing to character for manipulation
df[which(df$horsepower == "?"),'horsepower'] <- NA # for ease
df[df$horsepower==1]
df[df$horsepower==1,]
df <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data")
colnames(df) <- c("mpg", "cylinders", "displacement","horsepower","weight","acceleration","model year", "origin","car name")
catVar <- c("cylinders","model year","origin","car name")
numVar <- c("mpg","displacement","horsepower","weight","acceleration")
df[catVar] <- lapply(df[catVar], factor)
colnames(df)[colSums(df == "?")>0] # identufying th columns with missing values
df$horsepower <- as.character(df$horsepower) # changing to character for manipulation
df[which(df$horsepower == "?"),'horsepower'] <- NA # for ease
df$horsepower <- as.numeric(as.character(df$horsepower))
df[is.na(df$horsepower),]
temp <- subset(df,select = c("mpg", "displacement","weight","horsepower"))
lol <- c(33,127,331,337,355,375)
temp_test <- temp[which(is.na(temp$horsepower)),]
temp_train <- temp[which(!(is.na(temp$horsepower))),]
temp_mod <- lm(horsepower~mpg+weight+displacement, data = temp_train)
summary(temp_mod)
temp_pred <- predict(temp_mod,temp_test[,c(1:3)])
df[which(is.na(df$horsepower)),"horsepower"] <- temp_pred[match(which(is.na(df$horsepower)),names(temp_pred))]
df[lol,]
df
df[1:8]
library('caret')
library('lattice')
intrain <- createDataPartition(y = df[,'mpg'], p= 0.8,list = F)
df_train <- df[intrain,]
df_test <- df[-intrain,]
createModelFormula <- function(targetVar, xVars, includeIntercept = TRUE){
if(includeIntercept){
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ ')))
} else {
modelForm <- as.formula(paste(targetVar, "~", paste(xVars, collapse = '+ '), -1))
}
return(modelForm)
}
targetVar <- 'mpg'
form1 <- createModelFormula(targetVar,numVar[2:length(numVar)])
mod_1 <- lm(form1, data = df_train)
pred_1 <- predict(mod_1, df_test)
result <- data.frame(df_test$mpg,pred_1)
colnames(result) <- c("Actual", "Predicted")
result <- data.frame(result,(result$Actual-result$Predicted))
colnames(result)[3] <- "Error"
RSS <- sum((result$Error)^2)
TSS <- sum((result$Actual-mean(result$Actual))^2)
R_sqr <- 1-(RSS/TSS)
R_sqr
mod_2 <- lm(mpg~displacement+weight,data = df_train)
pred_2 <- predict(mod_2, df_test)
result_n <- data.frame(df_test$mpg,pred_2)
colnames(result_n) <- c("Actual", "Predicted")
result_n <- data.frame(result_n,(result_n$Actual-result_n$Predicted))
colnames(result_n)[3] <- "Error"
RSS1 <- sum((result_n$Error)^2)
TSS1 <- sum((result_n$Actual-mean(result_n$Actual))^2)
R_sqr1 <- 1-(RSS1/TSS1)
summary(mod_2)
R_sqr1
summary(mod_1)
head(df[1:8],20)
hist(df$weight~df$`model year`)
hist(df$weight~as.numeric(df$`model year`)
hist(df$weight~as.numeric(df$`model year`))
hist(df$weight,as.numeric(df$`model year`))
hist(df$cylinders)
hist(as.numeric(df$cylinders))
hist(as.numeric(df$`model year`))
hist(as.numeric(as.character(df$`model year`)))
weight_per_year <- aggregate(df$weight,list(df$`model year`),mean)
colnames(mpg_per_year) <- c("Model Year", "Mean weight")
weight_per_year
plot(df$weight,df$mpg)
mod_3 <- lm(mpg~.,data = df_train)
pred_3 <- predict(mod_3,df_test)
colnames(df)
agg <- sort(table(df[,"car name"]),decreasing = T)
agg
agg <- sort(table(df[,"car name"]),decreasing = T)[1:maxLevels]
agg <- sort(table(df[,"car name"]),decreasing = T)[1:10]
agg
agg <- sort(table(df[,"car name"]),decreasing = T)[1:18]
agg
capLevels <- function(data, field, maxLevels=10){
data[,field] <- as.character(data[,field])
agg <- sort(table(data[,field]), decreasing = TRUE)[1:maxLevels]
data[,paste0(field, "_agg")] <- data[,field]
data[!data[,field] %in% names(agg), paste0(field, "_agg")] <- 'other'
data[,field] <- as.factor(data[,field])
return(data)
}
data <- capLevels(df, field='car name', maxLevels=18)
sort(table(data[,'car name_agg']), decreasing = TRUE)
data
df_1 <- capLevels(df, field='car name', maxLevels=18)
df_1 <- df[,c(1:7,9)]
head(df_1)
df_1 <- df[,c(1:8,10)]
df_1 <- df_1[,c(1:8,10)]
df_1 <- capLevels(df, field='car name', maxLevels=18)
df_1 <- df_1[,c(1:8,10)]
head(df_1)
intrain1 <- createDataPartition(y = df_1[,'mpg'], p= 0.8,list = F)
df_1_train <- df_1[intrain,]
df_1_test <- df_1[-intrain,]
mod_3_fixed <- lm(mpg~.,data = df_1_train)
pred_3_fixed <- predict(mod_3_fixed,df_1_test)
pred_3_fixed
summary(mod_3_fixed)
str(df_1)
df_1 <- capLevels(df, field='car name', maxLevels=18)
str(df_1)
str(df)
str(df_train)
str(df_1)
df_1 <- df_1[,c(1:8,10)]
df_1$`car name_agg` <- as.factor(df_1$`car name_agg`)
str(df_1)
intrain1 <- createDataPartition(y = df_1[,'mpg'], p= 0.8,list = F)
df_1_train <- df_1[intrain,]
df_1_test <- df_1[-intrain,]
mod_3_fixed <- lm(mpg~.,data = df_1_train)
pred_3_fixed <- predict(mod_3_fixed,df_1_test)
summary(mod_3_fixed)
summary(mod_1)
result_1 <- data.frame(df_test$mpg,pred_1)
colnames(result_1) <- c("Actual", "Predicted")
result_1 <- data.frame(result_1,(result_1$Actual-result_1$Predicted))
colnames(result_1)[3] <- "Error"
RSS1 <- sum((result_1$Error)^2)
TSS1 <- sum((result_1$Actual-mean(result_1$Actual))^2)
R_sqr1 <- 1-(RSS1/TSS1)
summary(mod_1)
result_2 <- data.frame(df_test$mpg,pred_2)
colnames(result_2) <- c("Actual", "Predicted")
result_2 <- data.frame(result_2,(result_2$Actual-result_2$Predicted))
colnames(result_2)[3] <- "Error"
RSS2 <- sum((result_2$Error)^2)
TSS2 <- sum((result_2$Actual-mean(result_2$Actual))^2)
R_sqr2 <- 1-(RSS2/TSS2)
summary(mod_2)
result_3 <- data.frame(df_1_test$mpg,pred_3_fixed)
colnames(result_3) <- c("Actual", "Predicted")
result_3 <- data.frame(result_3,(result_3$Actual-result_3$Predicted))
colnames(result_3)[3] <- "Error"
RSS3 <- sum((result_3$Error)^2)
TSS3 <- sum((result_3$Actual-mean(result_3$Actual))^2)
R_sqr3 <- 1-(RSS3/TSS3)
summary(mod_3_fixed)
R_sqr3
colnames(df_1)
mod_4 <- lm(mpg~ cylinders + displacement + horsepower + weight + acceleration + `model year` + `car name_agg` , data = df_1_train)
summary(mod_4)
summary(mod_3_fixed)
pred_4 <- predict(mod_4,df_1_test)
result_4 <- data.frame(df_1_test$mpg,pred_4)
colnames(result_4) <- c("Actual", "Predicted")
result_4 <- data.frame(result_4,(result_4$Actual-result_4$Predicted))
colnames(result_4)[3] <- "Error"
RSS4 <- sum((result_4$Error)^2)
TSS4 <- sum((result_4$Actual-mean(result_4$Actual))^2)
R_sqr4 <- 1-(RSS4/TSS4)
R_sqr4
R_sqr3
corrplot(round(cor(df[,numVar]),2), method = "number")
mod_4 <- lm(mpg~ cylinders + displacement + horsepower + weight + `model year` + `car name_agg` , data = df_1_train)
#summary(mod_4)
pred_4 <- predict(mod_4,df_1_test)
result_4 <- data.frame(df_1_test$mpg,pred_4)
colnames(result_4) <- c("Actual", "Predicted")
result_4 <- data.frame(result_4,(result_4$Actual-result_4$Predicted))
colnames(result_4)[3] <- "Error"
RSS4 <- sum((result_4$Error)^2)
TSS4 <- sum((result_4$Actual-mean(result_4$Actual))^2)
R_sqr4 <- 1-(RSS4/TSS4)
R_sqr4
mod_4 <- lm(mpg~ cylinders + displacement + horsepower + weight + `model year` + `car name_agg` + origin, data = df_1_train)
#summary(mod_4)
pred_4 <- predict(mod_4,df_1_test)
result_4 <- data.frame(df_1_test$mpg,pred_4)
colnames(result_4) <- c("Actual", "Predicted")
result_4 <- data.frame(result_4,(result_4$Actual-result_4$Predicted))
colnames(result_4)[3] <- "Error"
RSS4 <- sum((result_4$Error)^2)
TSS4 <- sum((result_4$Actual-mean(result_4$Actual))^2)
R_sqr4 <- 1-(RSS4/TSS4)
R_sqr4
head(df_1,20)
vars <- c("displacement","horsepower","weight")
df_2[vars]
df_2 <- df_1
vars <- c("displacement","horsepower","weight")
df_2[vars]
df_2[vars] <- lapply(df_2[vars], log)
head(df_2)
intrain2 <- createDataPartition(y = df_2[,'mpg'], p= 0.8,list = F)
df_2_train <- df_2[intrain2,]
df_2_test <- df_2[-intrain2,]
mod_5 <- lm(mpg~ cylinders + displacement + horsepower + weight + `model year` + `car name_agg` + origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
summary(mod_5)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
R_sqr5
mod_5 <- lm(mpg~ cylinders + displacement + horsepower + weight + `model year` + origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
R_sqr5
mod_5 <- lm(mpg~ cylinders + displacement + horsepower + weight + `model year`, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
R_sqr5
mod_5 <- lm(mpg~ displacement + horsepower + weight + `model year`, origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
mod_5 <- lm(mpg~ cylinders + displacement + horsepower + weight + `model year`, origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
summary(mod_5)
unique(df_2$cylinders)
mod_5 <- lm(mpg~ displacement + horsepower + weight + `model year`, origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
summary(mod_5)
rm(mod_5,pred_5,result_5,RsS5,TSS5,R_sqr5)
rm(mod_5,pred_5,result_5,RSS5,TSS5,R_sqr5)
mod_5 <- lm(mpg~ displacement + horsepower + weight + `model year`, origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
mod_5 <- lm(mpg~ displacement + horsepower + weight + `model year`, origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
mod_5 <- lm(mpg~ displacement + horsepower + weight + `model year`, origin, data = df_2_train)
df_2 <- df_1
vars <- c("displacement","horsepower","weight")
df_2[vars] <- lapply(df_2[vars], log)
head(df_2)
intrain2 <- createDataPartition(y = df_2[,'mpg'], p= 0.8,list = F)
df_2_train <- df_2[intrain2,]
df_2_test <- df_2[-intrain2,]
mod_5 <- lm(mpg~ displacement + horsepower + weight + `model year`, origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
mod_5 <- lm(mpg~displacement + horsepower + weight + `model year`, origin, data = df_2_train)
str(df_2)
colnames(df_2)
mod_5 <- lm(mpg~displacement + horsepower + weight + `model year` + origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
R_sqr5
mod_5 <- lm(mpg~cylinders + displacement + horsepower + weight + `model year` + origin, data = df_2_train)
pred_5 <- predict(mod_5,df_2_test)
result_5 <- data.frame(df_2_test$mpg,pred_5)
colnames(result_5) <- c("Actual", "Predicted")
result_5 <- data.frame(result_5,(result_5$Actual-result_5$Predicted))
colnames(result_5)[3] <- "Error"
RSS5 <- sum((result_5$Error)^2)
TSS5 <- sum((result_5$Actual-mean(result_5$Actual))^2)
R_sqr5 <- 1-(RSS5/TSS5)
R_sqr5
